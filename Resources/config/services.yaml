# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    app.symfony_config.path: '%kernel.project_dir%/config/'
    app.eckinox_config.path: '%kernel.project_dir%/vendor/eckinox/eckinox-bundle/Resources/config/'
    app.controllers.path: {'App\Controller': '%kernel.project_dir%/src/Controller', 'Eckinox\Controller': '%kernel.project_dir%/vendor/eckinox/eckinox-bundle/Controller'}
    app.forms.path: {'App\Form': '%kernel.project_dir%/src/Form', 'Eckinox\Form': '%kernel.project_dir%/vendor/eckinox/eckinox-bundle/Form'}
    app.data.privileges: '%kernel.project_dir%/data/privileges.json'
    app.data.path: '%kernel.project_dir%/data/'
    app.data.path_bundle: '%kernel.project_dir%/vendor/eckinox/eckinox-bundle/Resources/data/'
    app.public.directory: '%kernel.project_dir%/public'
    app.attachments.path: '%kernel.project_dir%/private/attachments/'
    app.updates.path: ['%kernel.project_dir%/private/updates/', '%kernel.project_dir%/vendor/eckinox/eckinox-bundle/private/updates/']

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name

    Eckinox\:
        resource: '%kernel.project_dir%/vendor/eckinox/eckinox-bundle/*'
        exclude: '%kernel.project_dir%/vendor/eckinox/eckinox-bundle/{Entity,Migrations,Tests}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class

    Eckinox\Controller\:
        resource: '%kernel.project_dir%/vendor/eckinox/eckinox-bundle/Controller'
        tags: ['controller.service_arguments']

    Eckinox\Library\General\Asset:
        arguments: ['%kernel.debug%', "%%s?v=%%s"]
        public: false

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    eckinox.security.event_listener:
        class: Eckinox\Library\Symfony\EventListener\SecurityListener
        arguments: ["@session", "@translator", "@annotation_reader", "@security.token_storage", "@router"]
        #autowire: true
        tags:
           - { name: kernel.event_listener, event: kernel.controller, method: onKernelController }

    eckinox.cron.event_listener:
        class: Eckinox\Library\Symfony\EventListener\CronListener
        arguments: ["@annotation_reader", "@service_container", "@router"]
        #autowire: true
        tags:
           - { name: kernel.event_listener, event: kernel.controller, method: onKernelController }

    eckinox.lang.event_listener:
        class: Eckinox\Library\Symfony\EventListener\LangListener
        arguments: ["@annotation_reader", "@router"]
        tags:
           - { name: kernel.event_listener, event: kernel.controller, method: onKernelController }

    eckinox.breadcrumb.event_listener:
        class: Eckinox\Library\Symfony\EventListener\BreadcrumbListener
        arguments: ["@annotation_reader", "@security.token_storage", "@router"]
        autowire: true
        tags:
           - { name: kernel.event_listener, event: kernel.controller, method: onKernelController }

    Eckinox\Library\Symfony\EventListener\TranslationsListener:
        arguments: [ "@service_container", "@request_stack", "@doctrine.orm.entity_manager" ]
        tags:
           - { name: doctrine.event_listener, event: loadClassMetadata }
           - { name: doctrine.event_listener, event: prePersist }
           - { name: doctrine.event_listener, event: preUpdate }
           - { name: doctrine.event_listener, event: preRemove }

    AjaxController:
        class: Eckinox\Controller\General\AjaxController
        arguments: ["@translator", "@service_container", "@eckinox.converter"]

    EmailController:
        class: Eckinox\Controller\Application\EmailController
        arguments: ["@service_container"]

    swiftmailer.mailer.default.transport:
        class:     Swift_SendmailTransport
        arguments: ['/usr/sbin/sendmail -t']

    eckinox.converter:
        class:     Eckinox\Library\Symfony\Service\Converter
        arguments: ["@translator"]
        public: true
